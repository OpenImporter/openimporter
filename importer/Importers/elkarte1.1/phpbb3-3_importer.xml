<?xml version="1.0"?>
<importer xmlns="https://www.elkarte.net/xml/importer" xmlns:elk="https://www.elkarte.net/">
	<general>
		<name>phpBB33</name>
		<version>ElkArte 1.1</version>
		<className>phpBB33</className>
	</general>
	<step type="mandatory">
		<title>Importing Members</title>
		<detect>{$from_prefix}users</detect>
		<destination>{$to_prefix}members</destination>
		<presql>
			TRUNCATE {$to_prefix}members;
			TRUNCATE {$to_prefix}attachments;
		</presql>
		<preparsecode>
			userDataDefine($row, $this->db, $this->config);
		</preparsecode>
		<query>
			SELECT
				u.user_id AS id_member, SUBSTRING(u.username, 1, 80) AS member_name,
				SUBSTRING(u.username, 1, 255) AS real_name,
				SUBSTRING(u.user_password, 1, 255) AS passwd, u.user_lastvisit AS last_login,
				u.user_regdate AS date_registered, '' AS buddy_list,
				u.user_posts AS posts, IF(u.user_rank = 1, 1, IFNULL(mg.id_group, 0)) AS id_group,
				u.user_new_privmsg AS unread_messages, '' AS message_labels,
				SUBSTRING(u.user_email, 1, 255) AS email_address,
				u.user_unread_privmsg AS unread_messages, '' AS ignore_boards,
				pf.pf_phpbb_website AS website_url, pf.pf_phpbb_website AS website_title,
				u.user_allow_viewonline AS show_online, u.user_timezone AS time_offset,
				IF(u.user_allow_viewemail = 1, 0, 1) AS hide_email, u.user_avatar AS avatar,
				u.user_sig AS signature, u.user_sig_bbcode_uid,
				u.user_notify_pm AS pm_email_notify, u.user_avatar_type,
				CASE u.user_inactive_reason WHEN 0 THEN 1 ELSE 0 END AS is_activated,
				u.user_ip AS member_ip
			FROM {$from_prefix}users AS u
				LEFT JOIN {$from_prefix}ranks AS r ON (r.rank_id = u.user_rank AND r.rank_special = 1)
				LEFT JOIN {$to_prefix}membergroups AS mg ON (mg.group_name = CONCAT('phpBB ', r.rank_title))
				LEFT JOIN {$from_prefix}profile_fields_data AS pf ON (u.user_id = pf.user_id)
			WHERE u.group_id NOT IN (1, 6)
			GROUP BY u.user_id;
		</query>
	</step>
	<step>
		<title>Importing Custom Fields</title>
		<detect>{$from_prefix}profile_fields_data</detect>
		<destination>{$to_prefix}custom_fields_data</destination>
		<presql>
			TRUNCATE {$to_prefix}custom_fields_data;
		</presql>
		<options>
			<no_add>true</no_add>
		</options>
		<preparsecode>
			// We only import some data for default feilds, we do not create any custom fields
			// some default elk cust_loca, cust_locate, cust_gender, cust_blub, cust_icq, cust_twitt, cust_fbook
			// some default phpbb phpbb_location, phpbb_interests, phpbb_occupation, phpbb_icq, phpbb_facebook, phpbb_twitter
			$this->keys = array('id_member', 'variable', 'value');
			foreach (['cust_loca', 'cust_icq', 'cust_fbook', 'cust_twitt'] as $custom)
			{
				if (!empty($this->row[$custom]))
				{
					$this->rows[] = array(
						'id_member' => $this->row['id_member'],
						'variable' => $custom,
						'value' => $this->row[$custom]
					);
				}
			}
		</preparsecode>
		<query>
			SELECT
				user_id AS id_member, pf_phpbb_location AS cust_loca, pf_phpbb_icq AS cust_icq,
				pf_phpbb_facebook AS cust_fbook, pf_phpbb_twitter AS cust_twitt
			FROM {$from_prefix}profile_fields_data AS pf
		</query>
	</step>
	<step>
		<title>Importing Categories</title>
		<detect>{$from_prefix}forums</detect>
		<destination>{$to_prefix}categories</destination>
		<presql>TRUNCATE {$to_prefix}categories;</presql>
		<query>
			SELECT
				forum_id AS id_cat, SUBSTRING(forum_name, 1, 255) AS name, left_id AS cat_order
			FROM {$from_prefix}forums
			WHERE forum_type = 0;
		</query>
	</step>
	<step>
		<title>Importing Boards</title>
		<detect>{$from_prefix}forums</detect>
		<destination>{$to_prefix}boards</destination>
		<presql>
			TRUNCATE {$to_prefix}boards;
			DELETE FROM {$to_prefix}board_permissions WHERE id_profile > 4;
		</presql>
		<preparsecode>
			if (empty($row['id_cat']))
			{
				$row['id_cat'] = 1;
			}
			$row['name'] = str_replace('\n', '<br />', $row['name']);
		</preparsecode>
		<query>
			SELECT
				f.forum_id AS id_board, f.parent_id AS id_parent, f.left_id AS board_order,
				f.forum_posts_approved AS num_posts, f.forum_last_post_id AS id_last_msg,
				SUBSTRING(f.forum_name, 1, 255) AS name, f.parent_id AS id_cat, '-1,0' AS member_groups,
				SUBSTRING(f.forum_desc, 1, 65534) AS description, f.forum_topics_approved AS num_topics,
				f.forum_last_post_id AS id_last_msg
			FROM {$from_prefix}forums AS f
			WHERE forum_type = 1
			GROUP BY id_board;
		</query>
	</step>
	<step>
		<title>Fixing Categories</title>
		<detect>{$from_prefix}forums</detect>
		<destination>{$to_prefix}categories</destination>
		<code>
			// Adjust the order
			$request = $this->db->query("
				SELECT
					id_cat, cat_order
				FROM {$to_prefix}categories
				ORDER BY cat_order"
			);
			$order = 1;
			while ($row = $this->db->fetch_assoc($request))
			{
				$this->db->query("
					UPDATE {$to_prefix}categories
					SET cat_order = $order
					WHERE id_cat = $row[id_cat]"
				);
				$order++;
			}

			// order them
			$this->db->query("
				ALTER TABLE {$to_prefix}categories
				ORDER BY cat_order"
			);
		</code>
	</step>
	<step>
		<title>Importing Topics</title>
		<detect>{$from_prefix}topics</detect>
		<destination>{$to_prefix}topics</destination>
		<presql>
			TRUNCATE {$to_prefix}topics;
			TRUNCATE {$to_prefix}log_topics;
			TRUNCATE {$to_prefix}log_boards;
			TRUNCATE {$to_prefix}log_mark_read;
		</presql>
		<query>
			SELECT
				t.topic_id AS id_topic, t.forum_id AS id_board, t.topic_first_post_id AS id_first_msg,
				CASE t.topic_type
					WHEN 1 THEN 1
					WHEN 2 THEN 1
					ELSE 0
				END AS is_sticky,
				t.topic_last_post_id AS id_last_msg, t.topic_poster AS id_member_started,
				t.topic_last_poster_id AS id_member_updated, IF(po.topic_id > 0, po.topic_id, 0) AS id_poll,
				t.topic_posts_approved AS num_replies, t.topic_views AS num_views,
				CASE t.topic_status
					WHEN 1 THEN 1
					ELSE 0
				END AS locked
			FROM {$from_prefix}topics AS t
				LEFT JOIN {$from_prefix}poll_options AS po ON (po.topic_id = t.topic_id);
		</query>
	</step>
	<step>
		<title>Importing Messages</title>
		<detect> {$from_prefix}posts</detect>
		<destination>{$to_prefix}messages</destination>
		<presql>TRUNCATE {$to_prefix}messages;</presql>
		<options>
			<ignore>true</ignore>
			<slashes>true</slashes>
			<limit>100</limit>
		</options>
		<preparsecode>
			$row['body'] = phpbb_replace_bbc(unParse($row['body'], $row['bbcode_uid']));
			unset($row['bbcode_uid']);
		</preparsecode>
		<query>
			SELECT
				p.post_id AS id_msg, p.topic_id AS id_topic, p.forum_id AS id_board,
				p.post_time AS poster_time, p.poster_id AS id_member, p.post_subject AS subject,
				IFNULL(m.username, 'Guest') AS poster_name,	IFNULL(m.user_email, 'Unknown') AS poster_email,
				IFNULL(p.poster_ip, '0.0.0.0') AS poster_ip, p.enable_smilies AS smileys_enabled,
				p.post_edit_time AS modified_time, p.bbcode_uid,
				IFNULL(CASE p.post_edit_user WHEN 0 THEN '' ELSE m2.username END, 0) AS modified_name,
				p.post_text AS body
			FROM {$from_prefix}posts AS p
				LEFT JOIN {$from_prefix}users AS m ON (m.user_id = p.poster_id)
				LEFT JOIN {$from_prefix}users AS m2 ON (m2.user_id = p.post_edit_user);
		</query>
	</step>
		<step>
		<title>Importing polls</title>
		<detect>{$from_prefix}topics</detect>
		<destination>{$to_prefix}polls</destination>
		<presql>
			TRUNCATE {$to_prefix}polls;
			TRUNCATE {$to_prefix}poll_choices;
			TRUNCATE {$to_prefix}log_polls;
		</presql>
		<query>
			SELECT
				t.topic_id AS id_poll, t.poll_title AS question, t.poll_max_options AS max_votes,
				IFNULL((t.poll_start + t.poll_length), 0) AS expire_time, t.poll_vote_change AS change_vote,
				t.topic_poster AS id_member, IFNULL(m.username, 0) AS poster_name
			FROM {$from_prefix}topics AS t
				LEFT JOIN {$from_prefix}users AS m ON (m.user_id = t.topic_poster)
			WHERE t.poll_title != '';
		</query>
	</step>
	<step>
		<title>Importing poll choices</title>
		<detect>{$from_prefix}poll_options</detect>
		<destination>{$to_prefix}poll_choices</destination>
		<options>
			<ignore>true</ignore>
		</options>
		<query>
			SELECT
				topic_id AS id_poll, poll_option_id AS id_choice,
				SUBSTRING(poll_option_text, 1, 255) AS label, poll_option_total AS votes
			FROM {$from_prefix}poll_options;
		</query>
	</step>
	<step>
		<title>Importing poll votes</title>
		<detect>{$from_prefix}poll_votes</detect>
		<destination>{$to_prefix}log_polls</destination>
		<options>
			<ignore>true</ignore>
		</options>
		<query>
			SELECT
				topic_id AS id_poll, vote_user_id AS id_member, poll_option_id AS id_choice
			FROM {$from_prefix}poll_votes
			WHERE vote_user_id > 0;
		</query>
	</step>
		<step>
		<title>Importing personal messages</title>
		<detect>{$from_prefix}privmsgs</detect>
		<destination>{$to_prefix}personal_messages</destination>
		<presql>
			TRUNCATE {$to_prefix}personal_messages;
			TRUNCATE {$to_prefix}pm_recipients;
		</presql>
		<preparsecode>
			$row['body'] = phpbb_replace_bbc(unParse($row['body'], $row['bbcode_uid']));
			unset($row['bbcode_uid']);
		</preparsecode>
		<query><![CDATA[
			SELECT
				pm.msg_id AS id_pm, pm.author_id AS id_member_from, pm.message_time AS msgtime,
				SUBSTRING(uf.username, 1, 255) AS from_name, SUBSTRING(pm.message_subject, 1, 255) AS subject,
				pm.bbcode_uid, pm.message_text AS body
			FROM {$from_prefix}privmsgs AS pm
				LEFT JOIN {$from_prefix}users AS uf ON (uf.user_id = pm.author_id);
		]]></query>
	</step>
	<step>
		<title>Importing pm recipients</title>
		<detect>{$from_prefix}privmsgs_to</detect>
		<destination>{$to_prefix}pm_recipients</destination>
		<query>
			SELECT
				pm.msg_id AS id_pm, pm.user_id AS id_member, '-1' AS labels,
				CASE pm.pm_unread WHEN 1 THEN 0 ELSE 1 END AS is_read, pm.pm_deleted AS deleted
			FROM {$from_prefix}privmsgs_to AS pm
			GROUP BY pm.msg_id;
		</query>
	</step>
	<step>
		<title>Converting Ranks</title>
		<detect>{$from_prefix}ranks</detect>
		<destination>{$to_prefix}membergroups</destination>
		<presql>
			DELETE FROM {$to_prefix}membergroups
			WHERE group_name LIKE 'phpBB %';
		</presql>
		<preparsecode>
			// Delete just once
			if (!isset($_SESSION['convert_num_icons']))
			{
				$_SESSION['convert_num_icons'] = 1;

				// Remove post based membergroups, keep group id 4 as a post group.
				$this->db->query("
					DELETE FROM {$to_prefix}membergroups
					WHERE min_posts != -1 AND id_group > 4");
			}

			if ($row['min_posts'] > -1)
			{
				$row['icons'] = sprintf("%d#icon.png", $_SESSION['convert_num_icons']);
				if ($_SESSION['convert_num_icons'] != 5)
					$_SESSION['convert_num_icons']++;
			}
			elseif ($row['min_posts'] == -1)
			{
				$row['icons'] = "6#icon.png";
			}
		</preparsecode>
		<query>
			SELECT
				SUBSTRING(CONCAT('phpBB ', rank_title), 1, 255) AS group_name, rank_image AS icons,
				'' AS description, IF(rank_special = 0, rank_min, -1) AS min_posts, '' AS online_color
			FROM {$from_prefix}ranks
			ORDER BY rank_min;
		</query>
	</step>
	<step>
		<title>Converting groups</title>
		<detect>{$from_prefix}groups</detect>
		<destination>{$to_prefix}membergroups</destination>
		<query>
			SELECT
		  		SUBSTRING(CONCAT('phpBB ', group_name), 1, 255) AS group_name, -1 AS min_posts,
				'' AS icons, '' AS description, group_colour AS online_color
			FROM {$from_prefix}groups
			WHERE group_id NOT IN (1, 6);
		</query>
	</step>
	<step>
		<title>Converting additional groups</title>
		<detect>{$from_prefix}groups</detect>
		<destination>{$to_prefix}members</destination>
		<code>
			while (true)
			{
				pastTime($substep);

				$result = $this->db->query("
					SELECT
						mg.id_group, mem.id_member
					FROM {$from_prefix}groups AS g
						INNER JOIN {$from_prefix}user_group AS ug ON (ug.group_id = g.group_id)
						INNER JOIN {$to_prefix}members AS mem ON (mem.id_member = ug.user_id)
						INNER JOIN {$to_prefix}membergroups AS mg ON (mg.group_name = CONCAT('phpBB ', g.group_name))
					WHERE g.group_name NOT IN ('GUESTS', 'REGISTERED_COPPA', 'BOTS')
					ORDER BY id_member
					LIMIT $_REQUEST[start], 250"
				);

				$additional_groups = '';
				$last_member = 0;
				while ($row = $this->db->fetch_assoc($result))
				{
					if (empty($last_member))
					{
						$last_member = $row['id_member'];
					}

					if ($last_member != $row['id_member'])
					{
						$additional_groups = addslashes($additional_groups);
						$this->db->query("
							UPDATE {$to_prefix}members
							SET additional_groups = '$additional_groups'
							WHERE id_member = $last_member
							LIMIT 1"
						);
						$last_member = $row['id_member'];
						$additional_groups = $row['id_group'];
					}
					elseif ($additional_groups == '')
					{
						$additional_groups = $row['id_group'];
					}
					else
					{
						$additional_groups .= ',' . $row['id_group'];
					}
				}

				$_REQUEST['start'] += 250;
				if ($this->db->num_rows($result) >= 250)
				{
					$this->db->free_result($result);
					continue;
				}

				$this->db->free_result($result);
				break;
			}

			$_REQUEST['start'] = 0;
			if ($last_member != 0)
			{
				$additional_groups = addslashes($additional_groups);
				$this->db->query("
					UPDATE {$to_prefix}members
					SET additional_groups = '$additional_groups'
					WHERE id_member = $last_member
					LIMIT 1"
				);
			}
		</code>
	</step>
	<step>
		<title>Converting Attachments</title>
		<detect>{$from_prefix}attachments</detect>
		<destination>{$to_prefix}attachments</destination>
		<options>
			<no_add>true</no_add>
		</options>
		<preparsecode>
			// DB values to store
			$this->keys = array('id_attach', 'id_thumb', 'size', 'filename', 'file_hash', 'fileext', 'mime_type', 'attachment_type', 'id_msg', 'downloads', 'width', 'height');

			// Where are the attachments located
			if (!isset($phpbbAttachmentDir))
			{
				$result = $this->db->query("
					SELECT
						config_value
					FROM {$from_prefix}config
					WHERE config_name = 'upload_path'
					LIMIT 1"
				);
				$temp = $db->fetch_assoc($result);
				$phpbbAttachmentDir = $temp['config_value'];
				$this->db->free_result($result);

				if (empty($phpbbAttachmentDir) || !file_exists($this->config->path_from . '/' . $phpbbAttachmentDir))
				{
					$phpbbAttachmentDir = rtrim($this->config->path_from, '/\\') . '/file';
				}
				else
				{
					$phpbbAttachmentDir = rtrim($this->config->path_from, '/\\') . '/' . $phpbbAttachmentDir;
				}
			}

			// Copy the attachment
			$id_attach = $this->step1_importer->newIdAttach();
			$destination_path = $this->step1_importer->getAttachDir($this->row);
			$this->rows[] = $this->config->source->phpbb_copy_files($phpbbAttachmentDir, $this->row, $id_attach, $destination_path, false);

			// If we have its thumbnail ...
			if (!empty($this->row['thumbnail']))
			{
				$id_attach = $this->step1_importer->newIdAttach();
				$this->rows[] = $this->config->source->phpbb_copy_files($phpbbAttachmentDir, $this->row, $id_attach, $destination_path, true);
			}
		</preparsecode>
		<query>
			SELECT
				post_msg_id AS id_msg, download_count AS downloads, real_filename AS filename, physical_filename, filesize AS size, thumbnail
			FROM {$from_prefix}attachments;
		</query>
	</step>
</importer>