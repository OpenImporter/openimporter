* The prefix handling is rather messy, needs review
* Poll options import is broken
  In the original importer a new column (old_choice) was created in the
  destination database. This is not acceptable in this config,
  so we need a workaround.

<?xml version="1.0"?>
<importer xmlns="http://www.elkarte.net/xml/importer" xmlns:smf="http://www.elkarte.net/">
	<general>
		<name>Woltlab Burning Board 3.1</name>
		<className>WBB3_1</className>
		<form>
			<field id="1" type="text" size="20" default="wcf1_" label="WCF table prefix">wcf_prefix</field>
			<field id="2" type="text" size="20" default="wbb1_1_" label="WBB table prefix">wbb_prefix</field>
		</form>
		<globals>userOptions</globals>
	</general>
	<step id="settings" type="mandatory">
		<!-- @todo move to a method? -->
		<title>Analysing WCF options</title>
		<detect>{$from_prefix}{$wbb_prefix}user</detect>
	</step>
	<step id="members" type="mandatory">
		<title>Importing Members</title>
		<detect>{$from_prefix}{$wbb_prefix}user</detect>
		<query>
			SELECT
				u.userID AS id_member, SUBSTRING(u.username, 1, 80) AS member_name, '' AS buddy_list,
				IF (p.Posts IS NULL, 0, p.Posts) AS posts, u.registrationDate AS date_registered,
				u.lastActivityTime AS last_login,SUBSTRING(u.username, 1, 255) AS real_name,
				u.password AS passwd, SUBSTRING(u.email, 1, 64) AS email_address, '' AS message_labels,
				1 AS show_online, 0 AS id_group, 1 AS hide_email, '' AS ignore_boards,
				SUBSTRING(u.signature, 1, 65534) AS signature, salt AS password_salt
			FROM {$from_prefix}{$wcf_prefix}user AS u
				LEFT JOIN {$from_prefix}{$wbb_prefix}user AS p ON (u.userID = p.UserID);
		</query>
	</step>
	<step id="categories">
		<title>Importing Categories</title>
		<detect>{$from_prefix}{$wbb_prefix}board WHERE boardType = 1</detect>
		<query>
			SELECT
				c.boardID AS id_cat, SUBSTRING(c.title, 1, 255) AS name,
				o.position AS cat_order
			FROM {$from_prefix}{$wbb_prefix}board AS c
				LEFT JOIN {$from_prefix}{$wbb_prefix}board_structure AS o ON (o.boardID = c.boardID)
			WHERE boardType = 1;
		</query>
	</step>
	<step id="boards">
		<title>Importing Boards</title>
		<detect>{$from_prefix}{$wbb_prefix}board WHERE boardType = 0</detect>
		<query>
			SELECT
				b.boardID AS id_board, o.parentID AS id_parent, o.position AS board_order, 0 AS id_cat,
				SUBSTRING(b.title, 1, 255) AS name, SUBSTRING(b.description, 1, 65534) AS description,
				b.threads AS num_topics, b.countUserPosts AS num_posts, '1' AS member_groups
			FROM {$from_prefix}{$wbb_prefix}board AS b
				LEFT JOIN {$from_prefix}{$wbb_prefix}board_structure AS o ON (o.boardID = b.boardID)
			WHERE boardType = 0;
		</query>
	</step>
	<step id="topics">
		<title>Importing Topics</title>
		<detect>{$from_prefix}{$wbb_prefix}thread</detect>
		<query>
			SELECT
				t.threadID AS id_topic, t.isSticky AS is_sticky, t.boardID AS id_board,
				t.replies AS num_replies, t.views AS num_views, t.isClosed AS locked,
				t.userID AS id_member_started, t.lastPosterID AS id_member_updated,
				t.firstPostID AS id_first_msg, MAX(p.postid) AS id_last_msg,
				p.pollID AS id_poll
			FROM {$from_prefix}{$wbb_prefix}thread AS t
				LEFT JOIN {$from_prefix}{$wbb_prefix}post AS p ON (p.threadID = t.threadID)
			GROUP BY t.threadID
			HAVING id_first_msg != 0
				AND id_last_msg != 0;
		</query>
	</step>
	<step id="messages">
		<title>Importing Messages</title>
		<detect> {$from_prefix}{$wbb_prefix}post</detect>
		<options>
			<slashes>false</slashes>
			<limit>100</limit>
		</options>
		<query>
			SELECT
				p.postID AS id_msg, p.threadID AS id_topic, t.boardID AS id_board,
				p.time AS poster_time, p.userID AS id_member,
				SUBSTRING(t.topic, 1, 255) AS subject,
				SUBSTRING(IFNULL(u.username, p.username), 1, 255) AS poster_name,
				SUBSTRING(p.ipAddress, 1, 255) AS poster_ip,
				SUBSTRING(IFNULL(u.email, ''), 1, 255) AS poster_email,
				p.enableSmilies AS smileys_enabled,
				SUBSTRING(p.message, 1, 65534) AS body,
				p.lastEditTime AS modified_name, 'xx' AS icon
			FROM {$from_prefix}{$wbb_prefix}post AS p
				INNER JOIN {$from_prefix}{$wbb_prefix}thread AS t ON (t.threadID = p.threadID)
				LEFT JOIN {$from_prefix}{$wcf_prefix}user AS u ON (u.userID = p.userID);
		</query>
	</step>
	<step id="polls">
		<title>Importing polls</title>
		<detect>{$from_prefix}{$wcf_prefix}poll</detect>
		<query>
			SELECT
				p.pollID AS id_poll, SUBSTRING(p.question , 1, 255) AS question,
				t.userID AS id_member, p.endTime AS expire_time,
				SUBSTRING(IFNULL(t.username, ''), 1, 255) AS poster_name,
				choiceCount AS max_votes
			FROM {$from_prefix}{$wcf_prefix}poll AS p
				LEFT JOIN {$from_prefix}{$wbb_prefix}post AS m ON (p.pollID = m.pollID)
				LEFT JOIN {$from_prefix}{$wbb_prefix}thread AS t ON (m.threadID = t.threadID);
		</query>
	</step>
	<step id="polloptions">
		<title>Importing poll choices</title>
		<detect>{$from_prefix}{$wcf_prefix}poll</detect>
		<query>
			SELECT
				pollID AS id_poll, 1 AS id_choice, SUBSTRING(pollOption, 1, 255) AS label,
				votes AS votes, pollOptionID AS old_choice
			FROM {$from_prefix}{$wcf_prefix}poll_option
			ORDER BY pollID;
		</query>
	</step>
	<step id="pollvotes">
		<title>Importing poll votes</title>
		<!-- @todo this is broken -->
		<detect>{$from_prefix}{$wcf_prefix}poll_option_vote</detect>
		<query>
			SELECT
				v.pollID AS id_poll, v.userID AS id_member, c.id_choice AS id_choice
			FROM {$from_prefix}{$wcf_prefix}poll_option_vote AS v
				LEFT JOIN {$to_prefix}poll_choices AS c ON (v.pollOptionID = c.old_choice)
			GROUP BY id_poll, id_member;
		</query>
	</step>
	<step id="pm">
		<title>Importing personal messages</title>
		<detect>{$from_prefix}{$wcf_prefix}pm</detect>
		<query>
			SELECT
				pmID AS id_pm, userID AS id_member_from, '0' AS deleted_by_sender,
				time AS msgtime, username from_name, SUBSTRING(subject, 1, 255) AS subject,
				SUBSTRING(message, 1, 65534) AS body
			FROM {$from_prefix}{$wcf_prefix}pm;
		</query>
	</step>
	<step id="pmrecipients">
		<title>Importing pm recipients</title>
		<detect>{$from_prefix}{$wcf_prefix}pm_to_user</detect>
		<query>
			SELECT
				pmID AS id_pm, recipientID AS id_member,
				IF(isViewed > 0, 1, 0) AS is_read, IF(isDeleted = 1, 1, 0) AS deleted,
				'-1' AS labels, isBlindCopy AS bcc
			FROM {$from_prefix}{$wcf_prefix}pm_to_user;
		</query>
	</step>
	<step id="notifications">
		<title>Importing topic notifications</title>
		<detect>{$from_prefix}{$wbb_prefix}thread_subscription</detect>
		<query>
			SELECT
				userID AS id_member, threadID AS id_topic
			FROM {$from_prefix}{$wbb_prefix}thread_subscription;
		</query>
	</step>
	<step id="notifications">
		<title>Importing board notifications</title>
		<detect>{$from_prefix}{$wbb_prefix}board_subscription</detect>
		<query>
			SELECT
				userID AS id_member, boardID AS id_board
			FROM {$from_prefix}{$wbb_prefix}board_subscription;
		</query>
	</step>
</importer>